#!/usr/bin/env python

import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

class ObjectDetection:
    def __init__(self):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber('/camera/image_raw', Image, self.image_callback)

    def image_callback(self, data):
        cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

        # Definir el rango de color verde
        lower_green = np.array([50, 100, 100])
        upper_green = np.array([70, 255, 255])

        # Aplicar una máscara para obtener solo los objetos verdes en la imagen
        mask = cv2.inRange(hsv, lower_green, upper_green)

        # Encontrar los contornos de los objetos verdes en la imagen
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Si se encuentra al menos un contorno
        if len(contours) > 0:
            # Encontrar el contorno más grande (suponiendo que es el objeto que buscamos)
            c = max(contours, key=cv2.contourArea)

            # Calcular el centro del contorno
            M = cv2.moments(c)
            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            # Imprimir las coordenadas del objeto detectado
            print("Coordenadas X: ", cx)
            print("Coordenadas Y: ", cy)

def main():
    rospy.init_node('object_detection')
    ObjectDetection()
    rospy.spin()

if __name__ == '__main__':
    main()