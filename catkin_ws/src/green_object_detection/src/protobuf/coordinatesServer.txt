#!/usr/bin/env python3

import rospy
#from tu_paquete.tu_archivo_pb2 import Coordinate
#from tu_paquete.tu_archivo_pb2_grpc import CoordinatesServiceServicer, add_CoordinatesServiceServicer_to_server




###############################

import grpc 
from grpc import server ## ??
import object_coordinates_pb2
import object_coordinates_pb2_grpc
from object_coordinates_pb2_grpc import coordinatesServiceServicer, add_coordinatesServiceServicer_to_server
from geometry_msgs.msg import PointStamped
from concurrent.futures import ThreadPoolExecutor


# #### COKE
# from concurrent import futures
# import logging
# import sys
# import time
# import signal
# import grpc
# import coord_pb2
# import coord_pb2_grpc
# import rospy
# from geometry_msgs.msg import PointStamped

class CoordinatesService(object_coordinates_pb2_grpc.coordinatesServiceServicer):
    def __init__(self):
        self.timePoints = PointStamped()
        # Subscriber a nodo con coordenadas*100
        rospy.Subscriber("/coordinates", PointStamped, self.coordinates_callback)
    def getCoordinates(self, request, context):
        return object_coordinates_pb2.PointStamped(
            header = object_coordinates_pb2.PointStamped.Header(
                seq = self.timePoints.header.seq,
                stamp = int(self.timePoints.header.stamp.to_sec()),
                frame_id = self.timePoints.header.frame_id
            ),
            point = object_coordinates_pb2.PointStamped.Point(
                x = self.timePoints.point.x, ##
                y = self.timePoints.point.y, ##
                z=0 ## se agrega ??
            )
    )
    
    def coordinates_callback(self,data):
        self.timePoints = data
    
    ########################
    ## Señalado hacer esto
    def SetCoordinates(self, request_iterator, context):
        for coordinate in request_iterator: ## por que coordinates?? de donde sale
            rospy.loginfo(f"Coordenada recibida: {coordinate}") ## aqui tambien
            
        # Lógica para recibir nuevas coordenadas del objeto del cliente
        pass
    
    
    
# Inicializar nodo de ROS y servidor gRPC -----------
def main():
    rospy.init_node('grpc_server_node') ## Cambiar nombre??
    server = grpc.server(ThreadPoolExecutor())
    coordinates_service = CoordinatesService()
    add_coordinatesServiceServicer_to_server(coordinates_service, server)
    server.add_insecure_port('[::]:50051') ## ??
    server.start()
    rospy.spin()
    
if __name__ == '__main__':
    main()